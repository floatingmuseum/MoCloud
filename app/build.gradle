apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all{variant->
            variant.buildConfigField "String","TraktID","\""+getID()+"\""
        }

        applicationVariants.all{variant->
            variant.buildConfigField "String","TraktSecret","\""+getSecret()+"\""
        }

        applicationVariants.all{variant->
            variant.buildConfigField "String","FanrtApiKey","\""+getFanartApiKey()+"\""
        }

        applicationVariants.all{variant->
            variant.buildConfigField "String","TmdbApiKey","\""+getTmdbApiKey()+"\""
        }
    }
}

def getID(){
    def Properties properties = new Properties();
    properties.load(new FileInputStream(new File('secrets.properties')))
    return properties['TraktID'];
}

def getSecret(){
    def Properties properties = new Properties();
    properties.load(new FileInputStream(new File('secrets.properties')))
    return properties['TraktSecret'];
}

def getFanartApiKey(){
    def Properties properties = new Properties();
    properties.load(new  FileInputStream(new File('secrets.properties')))
    return properties['FanartApiKey']
}

def getTmdbApiKey(){
    def Properties properties = new Properties();
    properties.load(new  FileInputStream(new File('secrets.properties')))
    return properties['TmdbApiKey']
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile rootProject.ext.dependencies["appcompat-v7:23.1.1"]
    compile rootProject.ext.dependencies["design:23.1.1"]
    compile rootProject.ext.dependencies["cardview-v7"]
    compile rootProject.ext.dependencies["butterknife"]
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["converter-gson"]
    compile rootProject.ext.dependencies["gson"]
    compile rootProject.ext.dependencies["logger"]
    compile rootProject.ext.dependencies["photoview"]
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["adapter-rxjava"]
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:v2.0.7'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.android.support:support-v4:25.0.0'
    compile 'com.daimajia.numberprogressbar:library:1.2'
    //加载动画
    compile 'com.wang.avi:library:2.1.3'
    compile 'com.squareup.okio:okio:1.11.0'
    //阻塞检查
    debugCompile 'com.github.markzhai:blockcanary-android:1.4.0'
    releaseCompile 'com.github.markzhai:blockcanary-no-op:1.4.0'
    //内存泄漏检查
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
}
